// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package pulsar

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	DestinationConfigConnectionTimeout          = "connectionTimeout"
	DestinationConfigEnableTransaction          = "enableTransaction"
	DestinationConfigMaxConnectionsPerBroker    = "maxConnectionsPerBroker"
	DestinationConfigMemoryLimitBytes           = "memoryLimitBytes"
	DestinationConfigOperationTimeout           = "operationTimeout"
	DestinationConfigTlsAllowInsecureConnection = "tlsAllowInsecureConnection"
	DestinationConfigTlsCertificateFile         = "tlsCertificateFile"
	DestinationConfigTlsKeyFilePath             = "tlsKeyFilePath"
	DestinationConfigTlsTrustCertsFilePath      = "tlsTrustCertsFilePath"
	DestinationConfigTlsValidateHostname        = "tlsValidateHostname"
	DestinationConfigTopic                      = "topic"
	DestinationConfigUrl                        = "url"
)

func (DestinationConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		DestinationConfigConnectionTimeout: {
			Default:     "",
			Description: "ConnectionTimeout specifies the duration for which the client will\nattempt to establish a connection before timing out.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		DestinationConfigEnableTransaction: {
			Default:     "",
			Description: "EnableTransaction determines if the client should support transactions.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		DestinationConfigMaxConnectionsPerBroker: {
			Default:     "",
			Description: "MaxConnectionsPerBroker limits the number of connections to each broker.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		DestinationConfigMemoryLimitBytes: {
			Default:     "",
			Description: "MemoryLimitBytes sets the memory limit for the client in bytes.\nIf the limit is exceeded, the client may start to block or fail operations.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		DestinationConfigOperationTimeout: {
			Default:     "",
			Description: "OperationTimeout is the duration after which an operation is considered\nto have timed out.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		DestinationConfigTlsAllowInsecureConnection: {
			Default:     "",
			Description: "TLSAllowInsecureConnection configures whether the internal Pulsar client accepts untrusted TLS certificate from broker (default: false)",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		DestinationConfigTlsCertificateFile: {
			Default:     "",
			Description: "TLSCertificateFile sets the path to the TLS certificate file",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestinationConfigTlsKeyFilePath: {
			Default:     "",
			Description: "TLSKeyFilePath sets the path to the TLS key file",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestinationConfigTlsTrustCertsFilePath: {
			Default:     "",
			Description: "TLSTrustCertsFilePath sets the path to the trusted TLS certificate file",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestinationConfigTlsValidateHostname: {
			Default:     "",
			Description: "TLSValidateHostname configures whether the Pulsar client verifies the validity of the host name from broker (default: false)",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		DestinationConfigTopic: {
			Default:     "",
			Description: "Topic specifies the Pulsar topic used by the connector.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		DestinationConfigUrl: {
			Default:     "",
			Description: "URL of the Pulsar instance to connect to.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
